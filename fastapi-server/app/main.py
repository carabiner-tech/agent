from app.api.api import router as api_router
from app.manifest import get_manifest
from app.ws.manager import WsSessionManager
from app.ws.session import WsSession
from fastapi import Depends, FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()
app.include_router(api_router)
# /openapi.json and /docs endpoints are automatically generated by FastAPI

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.get("/.well-known/ai-plugin.json", include_in_schema=False)
async def manifest():
    return get_manifest()


@app.websocket("/ws")
async def ws(
    websocket: WebSocket,
    session_manager: WsSessionManager = Depends(WsSessionManager.instance),
):
    await websocket.accept()
    session = WsSession(websocket)
    print(f"New session: {session.id}")
    await session_manager.add_session(session)
    await session.send(f"Agent connected. Session ID: {session.id}")
    try:
        while True:
            msg = await websocket.receive_text()
            await session.handle_message(msg)
    except WebSocketDisconnect:
        await session_manager.remove_session(session.id)
        print(f"Session {session.id} disconnected")
